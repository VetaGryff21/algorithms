# -*- coding: utf-8 -*-
from math import *



# TЕСТЫ:
# 0 0 2.83, 4 4 2.83, 0 4 1.18 - покрывают края, но не покрывают середину треугольника
# 0 0 2.83, 4 4 2.83, 0 4 2.83 - покрывают края и покрывают середину треугольника (Почти идеально ровно)
# 0 0 2.83, 4 4 2.83, 0 4 2.7 - покрывают края и чуть-чуть не покрывают середину треугольника
# 0 0 2, 4 4 2, 0 4 4 - третий круг покрывает все 3 точки, а первый и второй не пересекаются
# 0 0 2, 4 4 2, 0 4 2 - круги не покрывают даже края
# К слову: Корень(8) = 2.8284...

# Ввод данных
O_1 = [0, 0, 2.83]
O_2 = [4, 4, 2.83]
O_3 = [0, 4, 1.18]


def check_side(x1, y1, r1, x2, y2, r2, check_x, check_y, check_r):
    side = hypot(x1-x2, y1-y2)

    if side <= fabs(r1 - r2):  # Круги вложены или совпадают, нас это устраивает
        print("Круги вложены")
        return True

    a = (pow(r1, 2) - pow(r2, 2) + pow(side, 2)) / (2*side)  # растояние от O_1 до центра ромба
    h = sqrt(pow(r1, 2) - pow(a, 2))  # a <= r1 всегда a=r1 когда окружности имеют 1 точку пересечения
    P_2_x = x1 + a*(x2 - x1)/side
    P_2_y = y1 + a*(y2 - y1)/side  # Точка пересечения в получившемся ромбе
    P_3_x = P_2_x + h * (y2 - y1) / side  # Верхняя точка пересечения
    P_3_y = P_2_y - h * (x2 - x1) / side
    P_4_x = P_2_x - h * (y2 - y1) / side  # Нижняя точка пересечения
    P_4_y = P_2_y + h * (x2 - x1) / side

    print("Точки пересечения:")
    print("X1- ", P_3_x)
    print("Y1- ", P_3_y)
    print("X2- ", P_4_x)
    print("Y2- ", P_4_y)
    if pow((check_x - P_3_x), 2) + pow((check_y - P_3_y), 2) <= pow(check_r, 2):
        return True
    if pow((check_x - P_4_x), 2) + pow((check_y - P_4_y), 2) <= pow(check_r, 2):
        return True
    return False


for i in range(3):
    O_1[i] = float(O_1[i])
    O_2[i] = float(O_2[i])
    O_3[i] = float(O_3[i])
side_1_2 = hypot(O_1[0]-O_2[0], O_1[1]-O_2[1])
side_1_3 = hypot(O_1[0]-O_3[0], O_1[1]-O_3[1])
side_2_3 = hypot(O_2[0]-O_3[0], O_2[1]-O_3[1])


# Проверка на покрытие одним треугольником
if O_3[2] >= max(side_2_3, side_1_3):
    print("Круг 3 покрывает весь треугольник")
    exit()

if O_2[2] >= max (side_2_3, side_1_2):
    print("Круг 2 покрывает весь треугольник")
    exit()

if O_1[2] >= max (side_1_3, side_1_2):
    print("Круг 1 покрывает весь треугольник")
    exit()


# Проверка сторон
if O_1[2] + O_2[2] < side_1_2:

    # радиусы треугольников не покрывают соответствующую сторону
    print("Круги не покрывают треугольник")
    exit()

if O_1[2] + O_3[2] < side_1_3:
    print("Круги не покрывают треугольник")
    exit()

if O_2[2] + O_3[2] < side_2_3:
    print("Круги не покрывают треугольник")
    exit()


# Проверка пересечений
print("Проверка перечения кругов 1 и 2")
side_1_2_check = check_side(O_1[0], O_1[1], O_1[2], O_2[0], O_2[1], O_2[2], O_3[0], O_3[1], O_3[2])
print(side_1_2_check)

print("Проверка перечения кругов 1 и 3")
side_1_3_check = check_side(O_1[0], O_1[1], O_1[2], O_3[0], O_3[1], O_3[2], O_2[0], O_2[1], O_2[2])
print(side_1_3_check)

print("Проверка перечения кругов 2 и 3")
side_2_3_check = check_side(O_2[0], O_2[1], O_2[2], O_3[0], O_3[1], O_3[2], O_1[0], O_1[1], O_1[2])
print(side_2_3_check)
print()

if side_1_2_check and side_1_3_check and side_2_3_check:
    print("Круги покрывают треугольник")
else:
    print("Круги не покрывают треугольник")